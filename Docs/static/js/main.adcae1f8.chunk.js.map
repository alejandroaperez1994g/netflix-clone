{"version":3,"sources":["axios.js","Row.js","requests.js","screens/SignUpScreen.js","screens/LoginScreen.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","Row","API_KEY","SignUpScreen","className","type","placeholder","LoginScreen","useState","signIn","setSignIn","src","alt","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAIiBA,EAAMC,OAAO,CAC1BC,QAAS,iC,kBC0DEC,IC/DTC,EAAU,mCAGE,8BAAD,OAAgCA,EAAhC,mBACS,wBAAD,OAA0BA,EAA1B,qCACP,4BAAD,OAA8BA,EAA9B,mBACK,2BAAD,OAA6BA,EAA7B,kCACC,2BAAD,OAA6BA,EAA7B,kCACC,2BAAD,OAA6BA,EAA7B,kCACE,2BAAD,OAA6BA,EAA7B,qCACC,2BAAD,OAA6BA,EAA7B,kC,kBCMPC,MAbf,WACE,OACE,qBAAKC,UAAU,eAAf,SACE,iCACE,kDACA,uBAAOC,KAAK,QAAQC,YAAY,UAChC,uBAAOD,KAAK,WAAWC,YAAY,aACnC,wBAAQD,KAAK,SAAb,oC,MCwCOE,MA9Cf,WAAwB,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACNC,EADM,KAGrB,OACE,sBAAKN,UAAU,cAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBACEA,UAAU,mBACVO,IAAI,kEACJC,IAAI,iBAEN,wBAAQR,UAAU,qBAAqBS,QAAS,kBAAMH,GAAU,IAAhE,qBAIA,qBAAKN,UAAU,4BAEjB,qBAAKA,UAAU,mBAAf,SACGK,EACC,cAAC,EAAD,IAEA,qCACE,kFACA,iFACA,4IAIA,qBAAKL,UAAU,oBAAf,SACE,iCACE,uBAAOC,KAAK,QAAQC,YAAY,UAChC,wBACEO,QAAS,kBAAMJ,GAAO,IACtBL,UAAU,yBAFZ,oCCTDU,MApBf,WAGE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,IAAD,UAEI,cAAC,EAAD,SCDKW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adcae1f8.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\n/**base requests to de movies database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport YouTube from \"react-youtube\";\r\nimport axios from './axios';\r\nimport './Row.css'\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n    const [movies, SetMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchURL);\r\n            SetMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n    }, [fetchURL]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            //\r\n            autoplay: 1,\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('')\r\n        } else {\r\n            movieTrailer((movie?.name || movie?.title).toString() || \"\")\r\n                .then(url => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                    console.log(urlParams)\r\n                }).catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    <img key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"f7182b2d73f71e8efc8c7b11f99cdb8e\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=es-ES`,\r\n    fetchNetfilxOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213&language=es-ES`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=es-ES`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28&language=es-ES`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35&language=es-ES`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27&language=es-ES`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749&language=es-ES`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99&language=es-ES`,\r\n\r\n}\r\n\r\nexport default requests;","import React from \"react\";\nimport \"./SignUpScreen.css\";\n\nfunction SignUpScreen() {\n  return (\n    <div className=\"signupScreen\">\n      <form>\n        <h1>Inicia Sesión</h1>\n        <input type=\"email\" placeholder=\"Email\" />\n        <input type=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\">Inicia Sesión</button>\n      </form>\n    </div>\n  );\n}\n\nexport default SignUpScreen;\n","import React, { useState } from \"react\";\nimport SignUpScreen from \"./SignUpScreen\";\nimport \"./LoginScreen.css\";\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen_background\">\n        <img\n          className=\"loginScreen_logo\"\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"Netflix Logo\"\n        />\n        <button className=\"loginScreen_button\" onClick={() => setSignIn(true)}>\n          Sign In\n        </button>\n\n        <div className=\"loginScreen_gradient\" />\n      </div>\n      <div className=\"loginScreen_body\">\n        {signIn ? (\n          <SignUpScreen />\n        ) : (\n          <>\n            <h1>Películas y series ilimitadas y mucho más.</h1>\n            <h2>Disfruta donde quieras. Cancela cuando quieras.</h2>\n            <h3>\n              ¿Quieres ver Netflix ya? Ingresa tu email para crear una cuenta o\n              reiniciar tu membresía de Netflix.\n            </h3>\n            <div className=\"loginScreen_input\">\n              <form>\n                <input type=\"email\" placeholder=\"Email\" />\n                <button\n                  onClick={() => signIn(true)}\n                  className=\"loginScreen_getStarted\"\n                >\n                  Comenzar\n                </button>\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\n\nfunction App() {\n  const user = null;\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}